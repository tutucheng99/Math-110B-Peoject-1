{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport scipy.sparse as scs\nimport scipy.linalg as scl\nimport scipy.optimize as sco\nimport matplotlib.pylab as plt","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:42:55.914581Z","iopub.execute_input":"2021-08-31T16:42:55.914925Z","iopub.status.idle":"2021-08-31T16:42:56.383475Z","shell.execute_reply.started":"2021-08-31T16:42:55.914896Z","shell.execute_reply":"2021-08-31T16:42:56.382126Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import os\ndata = pd.read_csv(\"../input/project-1-sudoku-challenge/small1.csv\")","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:46:10.312234Z","iopub.execute_input":"2021-08-31T16:46:10.312593Z","iopub.status.idle":"2021-08-31T16:46:10.330760Z","shell.execute_reply.started":"2021-08-31T16:46:10.312562Z","shell.execute_reply":"2021-08-31T16:46:10.329896Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"!pip install cvxopt","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:46:34.328429Z","iopub.execute_input":"2021-08-31T16:46:34.328776Z","iopub.status.idle":"2021-08-31T16:46:44.332686Z","shell.execute_reply.started":"2021-08-31T16:46:34.328747Z","shell.execute_reply":"2021-08-31T16:46:44.331692Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Collecting cvxopt\n  Downloading cvxopt-1.2.6-cp37-cp37m-manylinux1_x86_64.whl (11.6 MB)\n\u001b[K     |████████████████████████████████| 11.6 MB 4.3 MB/s eta 0:00:01\n\u001b[?25hInstalling collected packages: cvxopt\nSuccessfully installed cvxopt-1.2.6\n\u001b[33mWARNING: Running pip as root will break packages and permissions. You should install packages reliably by using venv: https://pip.pypa.io/warnings/venv\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"def check_by_row(board_list):\n    '''\n    Check which value from 1-9 is missing by row and plug in the missing value if the value can be determined.\n    '''\n    dic = generate_dictionary()\n    for i in range(9):\n        for j in range(9):\n            num = board_list[i][j]\n            if num != 0:\n                dic[num] = True\n        bool_values = list(dic.values())\n        count_value = bool_values.count(True)\n        if count_value == 8:\n            board_list[i][board_list[i].index(0)] = list(range(1,10))[bool_values.index(False)]\n        dic = generate_dictionary()\n    return board_list","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:47:22.880184Z","iopub.execute_input":"2021-08-31T16:47:22.880673Z","iopub.status.idle":"2021-08-31T16:47:22.888931Z","shell.execute_reply.started":"2021-08-31T16:47:22.880632Z","shell.execute_reply":"2021-08-31T16:47:22.887853Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def check_by_column(board_list:list):\n  \n    '''\n    Check which number is missing from 1-9 by column and plug in the missing value if the value can be determined.\n    '''\n    dic = generate_dictionary()\n    for i in range(9):\n        for j in range(9):\n            num = board_list[j][i]\n            if num != 0:\n                dic[num] = True\n        bool_values = list(dic.values())\n        count_value = bool_values.count(True)\n        if count_value == 9:\n            board_list[i][board_list[i].index(0)] = list(range(1,10))[bool_values.index(False)]\n        dic = generate_dictionary()\n    return board_list","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:47:30.743663Z","iopub.execute_input":"2021-08-31T16:47:30.744331Z","iopub.status.idle":"2021-08-31T16:47:30.751029Z","shell.execute_reply.started":"2021-08-31T16:47:30.744293Z","shell.execute_reply":"2021-08-31T16:47:30.750193Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"def check_by_submatrix(board_list:list):\n  '''\n  Check which number is missing from 1-9 by sub-3x3 matrix and plug in the missing value if the value can be determined.\n  '''\n  dic = generate_dictionary()\n  for i in range(9):\n      for j in range(9):\n          num = board_list[i][j]\n          if num != 0:\n              dic[num] = True\n      bool_values = list(dic.values())\n      count_value = bool_values.count(True)\n      if count_value == 8:\n          board_list[i][board_list[i].index(0)] = list(range(1,10))[bool_values.index(False)]\n      dic = generate_dictionary()\n  return board_list","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:47:37.947049Z","iopub.execute_input":"2021-08-31T16:47:37.947413Z","iopub.status.idle":"2021-08-31T16:47:37.954165Z","shell.execute_reply.started":"2021-08-31T16:47:37.947384Z","shell.execute_reply":"2021-08-31T16:47:37.953353Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"def generate_dictionary()-> dict:\n  '''\n  A helper function. \n  '''\n  dic = {}\n  for i in range(1, 10):\n      dic[i] = False\n  return dic","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:47:48.506550Z","iopub.execute_input":"2021-08-31T16:47:48.507063Z","iopub.status.idle":"2021-08-31T16:47:48.511581Z","shell.execute_reply.started":"2021-08-31T16:47:48.507031Z","shell.execute_reply":"2021-08-31T16:47:48.510652Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"def convert_to_recursive_list(board):\n    '''\n    Convert the board into a recursive list; each list is one row of the board.\n    :board_idx: the index of quizzes\n    '''\n    lst = list(board)\n    temp_list = []\n    full_list = []\n    for index, num in enumerate(lst):\n            temp_list.append(int(num))\n            index += 1\n            if index % 9 == 0:\n                full_list.append(temp_list)\n                temp_list = []\n    return full_list","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:48:12.089138Z","iopub.execute_input":"2021-08-31T16:48:12.089735Z","iopub.status.idle":"2021-08-31T16:48:12.096498Z","shell.execute_reply.started":"2021-08-31T16:48:12.089684Z","shell.execute_reply":"2021-08-31T16:48:12.095249Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"def plugged_grids(board_list:list):\n  '''Plug predetermined grids for the board_list.'''\n  board_list = check_by_row(board_list);\n  board_list = check_by_column(board_list);  \n  board_list = check_by_submatrix(board_list);\n  return board_list\n","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:48:30.895524Z","iopub.execute_input":"2021-08-31T16:48:30.896041Z","iopub.status.idle":"2021-08-31T16:48:30.901199Z","shell.execute_reply.started":"2021-08-31T16:48:30.895998Z","shell.execute_reply":"2021-08-31T16:48:30.900469Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"def index_to_plugged_grids(board_idx:int):\n  '''Get a predetermined grids plugged board_list from the index.'''\n  board_list = convert_to_recursive_list(board_idx);\n  board_list = plugged_grids(board_list);\n  return flattened_list","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:49:10.158619Z","iopub.execute_input":"2021-08-31T16:49:10.159167Z","iopub.status.idle":"2021-08-31T16:49:10.165080Z","shell.execute_reply.started":"2021-08-31T16:49:10.159120Z","shell.execute_reply":"2021-08-31T16:49:10.163658Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def fixed_constraints(N=9):\n  A_eq = [];\n \n# Each number appears onces in each row(i represents row, j represents column, k represents number)\n  for j in range(9):\n    for k in range(9):\n      zeros = np.zeros((729));\n      A = zeros.tolist();\n      for i in range(9):\n        A[(81*i+9*j+k)]=1;\n      A_eq = A_eq + [A];\n# Each number appears once in each column\n  for i in range(9):\n    for k in range(9):\n      zeros = np.zeros((729));\n      A = zeros.tolist();\n      for j in range(9):\n        A[(81*i+9*j+k)]=1;\n      A_eq = A_eq + [A];\n# Each number appears once in each subgrid\n  for a in range(3):\n    for c in range(3):\n      for k in range(9):\n        zeros = np.zeros((729));\n        A = zeros.tolist();\n        for b in range(3):\n          for d in range(3):\n            A[81*(3*a+b)+9*(3*c+d)+k]=1;\n        A_eq = A_eq + [A];\n# Each grid has one number\n  for i in range(9):\n    for j in range(9):\n      zeros = np.zeros((729));\n      A = zeros.tolist();\n      for k in range(9):\n        A[(81*i+9*j+k)]=1;\n      A_eq = A_eq + [A];\n  return A_eq ","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:49:34.606071Z","iopub.execute_input":"2021-08-31T16:49:34.606502Z","iopub.status.idle":"2021-08-31T16:49:34.619787Z","shell.execute_reply.started":"2021-08-31T16:49:34.606457Z","shell.execute_reply":"2021-08-31T16:49:34.618672Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"def given_constraint(quiz):\n    board_list = convert_to_recursive_list(quiz); # Convert quiz string to 9*9 recursive list\n    board_array = np.array(board_list); # Convert list to array\n    # Find out the location of nonzero elements in board_array\n    row = []; \n    column = [];\n    for j in range(9):\n      for k in range(9):\n        if board_array[j][k] != 0:\n          row.append(j)\n          column.append(k)\n    row = np.array(row);\n    column = np.array(column);\n    # List these nonzero elements\n    nonzero_values = np.array([board_array[row[d],column[d]] for d in range(len(row))])\n    \n    location_in_string = 9 * row + column;\n    nonzero_and_location = np.block([[nonzero_values],[location_in_string]])\n    \n    # Use lil_matrix to set an empty len(location_in_string)*729 matrix\n    given_constraints = scs.lil_matrix((len(location_in_string), 729))\n    # put 1 in the right positions\n    for i in range(len(location_in_string)):\n        given_constraints[i,location_in_string[i]*9 + nonzero_values[i] - 1] = 1;\n    # change back to csr_matrix.\n    given_constraints = given_constraints.tocsr() \n    \n    return given_constraints","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:50:16.312704Z","iopub.execute_input":"2021-08-31T16:50:16.313118Z","iopub.status.idle":"2021-08-31T16:50:16.327637Z","shell.execute_reply.started":"2021-08-31T16:50:16.313072Z","shell.execute_reply":"2021-08-31T16:50:16.326338Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"from cvxopt import solvers, matrix\nimport time\nimport random\nsolvers.options['show_progress'] = False\n\n# Import the data\n\nquizzes = data['quizzes'];\nsolutions = data['solutions'];\n\ncorr_cnt = 0\nstart = time.time()\nindex = list(range(len(data)))\nrandom_index = random.choices(index,k=1000)\nfor i in range(len(data)):\n    # Set the problem\n    quiz = quizzes[i];\n    solution = solutions[i];\n    # combine all constraints\n    A_fixed = fixed_constraints();\n    A_given = given_constraint(quiz);\n\n    A_vstack = scs.vstack((A_fixed,A_given));\n    A_vstack = A_vstack.toarray();\n    one = np.ones(A_vstack.shape[0]);\n    # Give A Full Rank, convert the problem to a full-rank problem\n    u, s, vh = np.linalg.svd(A_vstack, full_matrices=False)\n    nonzero_in_s = np.sum(s>1e-5)\n    S_ = np.block([np.diag(s[:nonzero_in_s]), np.zeros((nonzero_in_s, A_vstack.shape[0]-nonzero_in_s))])\n    A_svd = S_@vh\n    one = u.T@one;\n    one = one[:nonzero_in_s];\n    # Set the linear optimization problem\n    c = matrix(np.ones(1458))\n    G = matrix(np.block([[-np.eye(729),np.zeros((729,729))],[np.zeros((729,729)),-np.eye(729)]]))\n    h = matrix(np.block([0*np.ones(729),np.zeros(729)]))\n    A = matrix(np.block([A_svd, -A_svd]))\n    b = matrix(one);\n    # Solve it\n    sol = solvers.lp(c,G,h,A,b);\n    X = np.array(sol['x']).T[0];\n    x = X[:729] - X[729:];\n    \n    # map to board\n    answer_string = ''\n    for j in range(81):\n      for k in range(1,10):\n        if round(x[9*j+k-1]) == 1:\n            string_number = f'{k}'\n            answer_string = answer_string + string_number;\n\n    if answer_string == solution:\n        #print(\"CORRECT\")\n        corr_cnt += 1\n    \n    if (i+1) % 5 == 0:\n        end = time.time()\n        print(\"Aver Time: {t:6.2f} secs. Success rate: {corr} / {all} \".format(t=(end-start)/(i+1), corr=corr_cnt, all=i+1 ))\nend = time.time()\nprint(\"Aver Time: {t:6.2f} secs. Success rate: {corr} / {all} \".format(t=(end-start)/(i+1), corr=corr_cnt, all=i+1) )\n","metadata":{"execution":{"iopub.status.busy":"2021-08-31T16:51:05.040968Z","iopub.execute_input":"2021-08-31T16:51:05.041315Z","iopub.status.idle":"2021-08-31T16:51:53.975517Z","shell.execute_reply.started":"2021-08-31T16:51:05.041264Z","shell.execute_reply":"2021-08-31T16:51:53.974382Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Aver Time:   1.96 secs. Success rate: 5 / 5 \nAver Time:   1.95 secs. Success rate: 10 / 10 \nAver Time:   2.03 secs. Success rate: 15 / 15 \nAver Time:   2.07 secs. Success rate: 20 / 20 \nAver Time:   2.04 secs. Success rate: 24 / 24 \n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}